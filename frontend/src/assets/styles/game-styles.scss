@import "./addons/variables", "./addons/mixins";

@include main-setting;

$checked-color: #b7e9b1;

/* container-background is layout for Background components
* it is parent component for each components around game page
* uses animation for a smooth transition
*/
.container-background {
  display: grid;
  grid-template-columns: 1fr 80rem 1fr;
  position: relative;
  width: 100%;
  max-height: calc(100vh - 4rem);
  opacity: 0;
  animation: blur 0.5s ease-out forwards;
  @media (width < 100rem) {
    display: flex;
  }
}

/*
* main structure for important components cssForm, Playground
*
*/
.container-mission {
  grid-column: 2;
  display: flex;
  flex-direction: column;
  position: relative;
  gap: 2rem;
  height: 100vh;
  max-height: calc(100vh - 4rem);
  margin: 0 auto;
  width: 100%;
  max-width: $max-width;
  background-color: $background-secondary;
  z-index: 1;
  overflow: hidden;
  @media (min-width: $max-width) {
    box-shadow: inset 0 0 15px rgb(68, 68, 68);
  }
}

/* second horizontal half of game layout which contains 
 * start, crossover, end
 * grid divided on 3 part
*/
.container-playground {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 40vh;
  max-height: 30vw;
  z-index: 1;
}

// contianer where is a .bridge, user can style it
.container-bridge {
  display: flex;
  width: 100%;
  height: 100%;
  div {
    width: 100%;
    height: 4rem;
    background-size: cover;
  }
  img {
    width: 100%;
    height: 4rem;
    height: auto;
  }
}

/* Container for css component
- flex column
*/
.container-form {
  display: flex;
  flex-direction: column;
  width: fit-content;
  position: relative;
  height: fit-content;
  .headline {
    display: flex;
    align-items: center;
  }
  // brackets img in container-form
  img {
    height: 1.5rem;
    width: 1.5rem;
  }
  // button under form
  .class-button {
    position: absolute;
    left: 90%;
    cursor: pointer;
    transition: 0.5s;
    &:hover {
      transform: scale(1.2);
    }
  }
}

.icon {
  position: absolute;
}

// css setting form for bridge class
.form-css {
  display: grid;
  position: relative;
  grid-template-columns: minmax(0, 1fr);
  column-gap: 1rem;
  row-gap: 0.5rem;
  padding: 0.5rem;
  padding-inline: 2rem;
  padding-bottom: 1rem;
}

.form-css__row {
  display: grid;
  grid-template-columns: repeat(2, minmax(0, 1fr));
  gap: 0.5rem;
  position: relative;
  img {
    cursor: pointer;
  }

  .icon {
    place-self: center end;
    translate: 2rem;
    cursor: pointer;
    z-index: 1;
  }
  div {
    display: flex;
    gap: 0.05rem;
  }
  .form-css__input {
    display: inline-flex;
    max-width: 5rem;
    font-weight: bold;
    white-space: nowrap;
    border: none;
    background-color: transparent;
    border-bottom: 2px dotted rgba($primary-color, 0.6);
    &:focus {
      outline: none;
    }
    &.inputed:not(:focus) {
      border-bottom: none;
    }
  }
  input::placeholder {
    color: #696969;
  }
}

// box of buttons for cssForm component
.box-buttons {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  height: fit-content;
  place-items: end center;
  place-self: end center;
  position: absolute;
  padding: 0.5rem;
  margin: 0;
  margin-left: 2rem;
  bottom: -2rem;
  width: 90%;
  .play {
    grid-column: 1;
    grid-row: 1;
    display: grid;
    width: fit-content;
    height: fit-content;
    place-self: end start;
    //translate: 0 1.5rem;
  }

  .plus-icon {
    grid-row: 1;
    grid-column: 2;
    display: grid;
    cursor: pointer;
    img {
      position: relative;
    }
  }

  .checkbox {
    grid-column: 3;
    display: grid;
    position: relative;
    border: 1px solid #696969;
    box-shadow: $primary-shadow;
    width: 1.35rem;
    height: 1.35rem;
    border-radius: 0.2rem;
    place-self: end end;
    cursor: pointer;
    transition: 0.35s;

    &:hover {
      background-color: $checked-color;
      .checkbox-label {
        visibility: visible;
        translate: 0 2rem;
        opacity: 1;
      }
    }
    &.active {
      background-color: $checked-color;
    }
    .pin {
      position: absolute;
      place-self: center;
      width: 1.2rem;
      height: 1.2rem;
    }
    input {
      position: absolute;
      width: 100%;
      height: 100%;
      cursor: pointer;
      opacity: 0;
      z-index: 1;
    }
    .checkbox-label {
      position: absolute;
      background-color: #303030;
      color: white;
      width: max-content;
      visibility: visible;
      transition: 0.25s;
      translate: 0 2.5rem;
      padding: 0.35rem;
      border-radius: 0.35rem;
      opacity: 0;
      box-shadow: $primary-shadow;
      &::before {
        content: "";
        height: 1rem;
        width: 1rem;
        position: absolute;
        background-color: #303030;

        top: -0.5rem;
        clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
      }
    }
  }
}

// error messages setting
// it is used around the form when
// the user enters the wrong input value.
.error-message {
  display: flex;
  position: absolute;
  bottom: -60%;
  background-color: $error-color;
  width: fit-content;
  padding: 0.25rem;
  margin: 0.5rem;
  border-radius: 0.35rem;
  box-shadow: 0 0px 8px -2px rgb(0, 0, 0);
  backdrop-filter: blur(15px);
  -webkit-backdrop-filter: blur(15px);

  p {
    color: $secondary-color;
  }
}

// basic settings for buttons
button {
  display: flex;
  border: none;
  background-color: transparent;
  width: 2rem;
  height: 2rem;
  cursor: pointer;

  img {
    transition: 0.5s;
  }

  img:hover {
    transform: scale(1.2);
  }
}

// menu with options that the user can select
// main part of SuggesList.js
.suggest-list {
  display: grid;
  position: absolute;
  top: 100%;
  list-style: none;
  background-color: $addons-color;
  width: fit-content;
  min-width: 10rem;
  margin-left: 0.5rem;
  padding-block: 0.5rem;
  border-radius: 0.5rem;
  max-height: 8rem;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
  @include scroll-primary;
  z-index: 2;
  span {
    font-weight: bold;
  }
  li {
    padding-inline: 0.5rem;
    color: white;
    cursor: pointer;
    width: 100%;
    &:hover {
      background-color: rgba(255, 255, 255, 0.15);
    }
  }
}

// start position in game, it is used in StartPoint.js
.start {
  display: flex;
  position: relative;
  width: 100%;
  background-size: auto;
  background-repeat: repeat;
}

// middle part of playground. bridge,
// checkPoint, River component are positioned there
.crossover {
  display: flex;
  width: 100%;
  position: relative;
  align-items: flex-start;
  z-index: 1;
  .crossover__image {
    position: absolute;
    width: 100%;
    bottom: 0;
  }
}

// endpoint in playground, it is used in EndPoint.js
.end {
  display: grid;
  position: relative;
  width: 100%;
  background-size: auto;
  background-repeat: repeat;
}
.actual-level {
  place-self: end end;
  font-size: 2.5rem;
  padding-right: 1rem;
  font-weight: bold;
  z-index: 100;
  color: lighten(#a77347, 40);
  text-shadow: 0 0 4px black;
}

// seamless texture on top of .start and .end
.lawn {
  width: 100%;
  height: 2rem;
  background-size: contain;
  background-repeat: repeat-x;
  position: absolute;
  top: -2rem;
  border-radius: 5rem 5rem 0 0;
  //z-index: 1;
}

// area with correct location, if user's bridge is there,
// the mission will be completed
.target-area {
  display: flex;
  position: absolute;
  flex-direction: row;
  height: 100%;
  width: 100%;
}

// If bridge has more parts target-area has the same number of parts
.target-area__part {
  height: 4rem;
  width: 100%;
  background-color: rgba(white, 0.35);
  border: 2px dashed grey;
}

// main emoji character in game
.emoji-character {
  display: flex;
  width: 4rem;
  position: absolute;
  top: -3.95rem;
  transform-origin: center;
}

.enemy-emoji {
  display: grid;
  position: absolute;
  width: 4rem;
  height: 4rem;
  top: -4rem;
  transform-origin: center;
  right: 0;
}

.enemy-emoji.twenty-one-true {
  animation: twentyOneTrue 3s linear forwards;
}
.enemy-emoji.twenty-one-false {
  animation: twentyOneFalse 2s linear forwards;
}

.emoji-message {
  background-color: white;
  position: relative;
  width: 10rem;
  top: -8rem;
  padding: 0.5rem;
  opacity: 0;

  &.twenty-one-false {
    animation: twenty-one-message 0.5s 2s linear forwards;
  }
  &.twenty-one-true {
    opacity: 1;
    transition: 0.5s;
    transition-delay: 3s;
  }
}

@keyframes twenty-one-message {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes twentyOneTrue {
  50% {
    transform: translateX(-10rem) rotate(-2turn);
  }
  100% {
    transform: translateX(5rem) rotate(0turn);
  }
}

@keyframes twentyOneFalse {
  100% {
    transform: translateX(-10rem) rotate(-2turn);
  }
}

// animation for right answer
.emoji-character.true {
  left: 90%;
  animation: rotate 6s linear;
}

// animation for bad answer
.emoji-character.false {
  opacity: 1;
  animation: error-run 6s linear;

  @media (max-width: $max-width) {
    animation: error-run-small 6s linear;
  }
}

// special animation for correct answer
.emoji-character.stairs-run {
  left: 90%;
  top: 8rem;
  z-index: 1;
  animation: fromStairs 6s linear;
}

.emoji-character.twenty-one {
  animation: rotate 6s linear 2s forwards;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
    left: 0;
  }

  100% {
    transform: rotate(1080deg);
    left: 90%;
  }
}

@keyframes fromStairs {
  0% {
    transform: rotate(0deg);
    left: 0;
    top: -3.95rem;
  }

  44% {
    transform: rotate(475deg);
    left: 44%;
    top: -3.95rem;
  }
  50% {
    transform: rotate(540deg);
    left: 44%;
    top: 0rem;
  }
  61% {
    transform: rotate(650deg);
    left: 55%;
    top: 0rem;
  }
  70% {
    transform: rotate(750deg);
    left: 55%;
    top: 4rem;
  }
  81% {
    transform: rotate(860deg);
    left: 66%;
    top: 4rem;
  }
  90% {
    transform: rotate(960deg);
    left: 66%;
    top: 8rem;
  }
  100% {
    transform: rotate(1080deg);
    left: 90%;
    top: 8rem;
  }
}

/*@keyframes main-twenty-one{
    0% {
        transform: rotate(0deg);
        left: 0;
    }

    100% {
        transform: rotate(1080deg);
        left: 90%;
    }
}*/

@keyframes error-run {
  50% {
    transform: translateX(24rem) rotate(2turn);
  }

  100% {
    transform: translateX(0) rotate(0turn);
  }
}

@keyframes error-run-small {
  50% {
    transform: translateX(28vw) rotate(2turn);
  }

  100% {
    transform: translateX(0) rotate(0turn);
  }
}

// ===== River styles ======
// box with wave element
.box-wave {
  display: flex;
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 90%;
  max-height: 12rem;
}

.wave {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 100%;
  background-color: #2c74b3;
  box-shadow: inset 0 0 50px 0 $addons-color;
  overflow: hidden;
  z-index: -1;
}

.wave:before,
.wave:after {
  content: "";
  position: absolute;
  top: 0;
  left: 50%;
  width: 180%;
  height: 300%;
  max-height: 800px;
  max-width: 600px;
  background: black;
  transform: translate(-50%, -75%);
}

.wave:before {
  border-radius: 45%;
  //width: 180%;
  background-color: $background-secondary;
  animation: animate 7s linear infinite;
}

.wave:after {
  border-radius: 40%;
  background-color: rgba($background-secondary, 0.5);
  animation: animate 15s linear infinite;
}

// animation for waves motion
@keyframes animate {
  0% {
    transform: translate(-50%, -75%) rotate(0deg);
  }

  100% {
    transform: translate(-50%, -75%) rotate(360deg);
  }
}

// ==== End of river style ====

// Text that will be display after reply
.message-result {
  display: none;
  flex-direction: column;
  align-items: center;
  justify-self: center;
  position: absolute;
  height: fit-content;
  width: fit-content;
  max-width: 50%;
  top: 35%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 3rem;
  font-weight: bold;
  z-index: 5;
  margin: 0;
  padding: 1rem;
  padding-inline: 3rem;
  gap: 1rem;
  box-shadow: 0 0 8px $addons-color;
  border-radius: 0.5rem;
  opacity: 0;
  animation: blur 1s forwards;
  &:has(.win) {
    display: flex;
    background-color: rgba(73, 167, 128, 0.5);
  }
  &:has(.lost) {
    display: flex;
    background-color: $error-color;
    z-index: 1;
  }
  .next-level-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    width: fit-content;
    height: 2.75rem;
    position: relative;
    padding-inline: 0.5rem;
    transition: 0.25s;
    transform-origin: left;
    /*&:hover .retry {
      animation: rotation 1s linear forwards infinite;
    }*/
    &:hover .next-level {
      transition: 1s;
      animation: arrival 0.15s linear forwards;
    }
    &:not(:hover) .next-level {
      animation: departure 0.15s linear forwards;
    }
    &:has(.next-level):hover span {
      transform: translateX(-5%);
    }
  }
  span {
    color: white;
    font-size: 1.25rem;
    font-weight: bold;
    transition: 0.25s;
  }
  img {
    position: absolute;
    top: 0;
    width: 1.5rem;
    height: 1.5rem;
    cursor: pointer;
    transition: 0.5s;
    &:hover {
      transform: scale(1.2);
    }
  }
  .next-level {
    width: 2.5rem;
    height: 2.5rem;
    position: absolute;
    top: 0.7rem;
    transition: 1s;
    left: 90%;
    filter: brightness(2);
  }
  @include medium-screen {
    font-size: 1.5rem;
    bottom: 50vh;
  }
}

.retry-button {
  display: flex;
  flex-direction: row;
  background-color: #ffffff1a;
  box-shadow: 0px 4px 8px -2px rgba(9, 30, 66, 0.25),
    0px 0px 0px 1px rgba(9, 30, 66, 0.08);
  border-radius: 0.25rem;
  width: fit-content;
  align-items: center;
  gap: 0.5rem;
  padding-inline: 0.5rem;
  &:hover {
    .retry {
      animation: rotation 1s linear forwards infinite;
    }
  }
  .retry {
    position: relative;
    height: 1rem;
    width: 1rem;
  }
}

@keyframes arrival {
  0% {
    left: 80%;
    opacity: 0;
  }
  100% {
    left: 90%;
    opacity: 1;
  }
}

@keyframes departure {
  0% {
    left: 90%;
    opacity: 1;
  }
  100% {
    left: 110%;
    opacity: 0;
  }
}

@keyframes rotation {
  0% {
    transform: rotate(0turn);
  }
  100% {
    transform: rotate(1turn);
  }
}

// a design of the text according to replied
.win {
  color: white;
}

// a desing for bad response
.lost {
  color: white;
}

// marginal elements
.left-bracket {
  top: 0;
  left: 3rem;
}

.right-bracket {
  top: 0;
  filter: brightness(30%);
}

// there are specific forms (.bridge form, .container form, etd.)
.box__classes {
  display: grid;
  grid-template-columns: repeat(3, minmax(0, 1fr));
  position: relative;
  gap: 3rem;
  width: fit-content;
  margin: 1rem;
  @include medium-screen {
    grid-template-columns: 1fr 1fr;
  }
  @include small-screen {
    grid-template-columns: 1fr;
  }
}

// If user does not select this form, its style is defined as follows
.empty-box {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(255, 255, 255, 0.25);
  width: 15rem;
  aspect-ratio: 2/1;
  img {
    width: 2rem;
    aspect-ratio: 1/1;
    cursor: pointer;
    transition: 0.5s;

    &:hover {
      transform: scale(1.2);
    }
  }
}

// obstacle on the way
img.obstacle {
  position: absolute;
  top: -12rem;
  left: -10rem;
  height: 12rem;
  width: 12rem;
}

// if the bridge has multiple parts so each part has this original state
.bridge__item {
  height: 4rem;
  max-width: 33.334%;
}

// magnifier, game element
.glass {
  display: grid;
  grid-template: 1fr / 1fr;
  position: absolute;
  top: -125%;
  right: -88%;
  width: 3rem;
  cursor: pointer;
  transition: 0.5s;
  z-index: 1;
  filter: drop-shadow(0 0 2px rgb(78, 78, 78));
  &:hover {
    transform: scale(1.15);
  }
  @include large-screen {
    position: fixed;
    top: 5rem;
    right: 5vw;
  }
  @include different-aspect-ratio {
    position: absolute;
    top: -40vh;
    right: -88%;
  }
}

// box where is an information about properties of css classes
.about-class {
  display: flex;
  position: absolute;
  width: 12rem;
  right: -95%;
  top: -110%;
  flex-direction: column;
  background-color: $addons-color;
  border-radius: 0.35rem;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
  @include large-screen {
    position: fixed;
    top: 8.5rem;
    right: 2vw;
  }
  @include different-aspect-ratio {
    position: absolute;
    top: -20vh;
    right: -95%;
  }
}

// information about specific css class(bridge/container)
.about-class__article {
  z-index: 1;
  transition: 0.3s;
  padding: 0.5rem;
  border-radius: 0.5rem;
  opacity: 0;
  height: 0;
  animation: blure 0.5s linear forwards;
  @include scroll-primary;

  li {
    font-size: 1rem;
    list-style: none;
    color: white;
  }
}

.css-key {
  color: #9cdcfe;
}

.css-value {
  color: #b5cea8;
}

@keyframes blure {
  0% {
    height: 0;
    opacity: 0;
  }

  50% {
    height: 8rem;
    opacity: 0;
  }

  100% {
    height: 8rem;
    opacity: 1;
  }
}

// menu of opitons to selecet from
.about-class__menu {
  display: flex;
  z-index: 1;
  li {
    display: flex;
    padding: 0.25rem;
    justify-content: center;
    width: 100%;
    color: white;
    font-weight: bold;
    cursor: pointer;
    transition: 0.5s;
    &:hover {
      background-color: rgba(255, 255, 255, 0.15);
    }
    &.active {
      background-color: rgba(255, 255, 255, 0.15);
    }
  }
}

.info-box {
  display: none;
  position: absolute;
  grid-row: 8;
  grid-column: 1/13;
  background-color: rgba(0, 0, 0, 0.6);
  color: white;
  width: 100%;

  height: auto;
  padding: 0.5rem;
  opacity: 0;
  scale: 0;
  transition: display 0.3s, scale 0.3s, opacity 0.3s;
  transition-behavior: allow-discrete;
  //border-radius: 0.35rem;
  box-shadow: 0 0 4px #303030;
  border-top: 2px solid #3030308c;
  border-bottom: 2px solid #3030308c;
  p {
    color: white;
  }
  &.active {
    display: grid;
    scale: 1;
    opacity: 1;
    @starting-style {
      scale: 0.5;
      opacity: 0.2;
    }
  }
}

.temporary-container {
  display: grid;
  position: absolute;
  top: 15rem;
  left: 20rem;
  padding: 1rem;
  padding-top: 1.5rem;
  height: fit-content;
  width: fit-content;
  background-color: rgba(250, 250, 250, 0.35);
  border: 1px solid #606060;
  box-shadow: $primary-shadow;
  border-radius: 0.15rem;
  .close-icon {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    cursor: pointer;
    transition: 0.5s;
    &:hover {
      transform: scale(1.2);
    }
  }
  &.second-level {
    left: 35rem;
  }

  @media (width < 40.01rem) {
    display: none;
  }
}

.temporary-box {
  display: flex;
  align-items: center;
  text-wrap: nowrap;
  gap: 0.5rem;
  p {
    font-style: italic;
    font-weight: bold;
    font-size: 1rem;
  }
  span {
    font-weight: bold;
    font-size: 1.35rem;
  }
}

.temporary-circle-bg {
  position: absolute;
  filter: brightness(2);
  top: -5rem;
  left: -5rem;
}

.temporary-play {
  position: absolute;

  left: 2rem;
  img {
    transform: rotate(-80deg);
  }
}
.temporary-arrow {
  position: absolute;
  top: -8rem;
  left: -9rem;
  rotate: -80deg;
}

// temporary lebel
.temporary-label {
  display: grid;
  place-self: start end;
  translate: -2rem -7rem;
  position: absolute;

  .temporary-text {
    display: flex;
    text-wrap: nowrap;
    position: absolute;
    gap: 1rem;

    bottom: 0.15rem;
    translate: 6.25rem;
    font-style: italic;
    //font-weight: bold;
    svg {
      cursor: pointer;
    }
  }
}
